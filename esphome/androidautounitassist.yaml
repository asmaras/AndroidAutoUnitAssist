esphome:
  name: androidautounitassist
  friendly_name: AndroidAutoUnitAssist

  on_boot:
    then:
      - script.execute: led_alive

external_components:
  - source:
      type: local
      path: external_components
    components: android_auto_unit_assist_component

android_auto_unit_assist_component:
  id: android_auto_unit_assist_component1

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: debug

# Enable Home Assistant API
api:
  encryption:
    key: xxxxxxxxxxxxxxxxx

  # This can be a stand-alone device without a connection. Make sure it doesn't reboot if the connection fails
  reboot_timeout: 0s

ota:
  - platform: esphome
    password: xxxxxxxxxxxxxxxxx

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Androidautounitassist"
    password: xxxxxxxxxxxxxxxxx

  # This can be a stand-alone device without a connection. Make sure it doesn't reboot if the connection fails
  reboot_timeout: 0s

captive_portal:
    
web_server:
  port: 80

output:
  - platform: gpio
    id: programmeerbare_led
    pin:
      number: GPIO3
      inverted: TRUE

script:
  - id: led_alive
    then:
      - while:
          condition:
            lambda: return true;
          then:
            - output.turn_on: programmeerbare_led
            - delay: 100ms
            - output.turn_off: programmeerbare_led
            - delay: 500ms
            - output.turn_on: programmeerbare_led
            - delay: 100ms
            - output.turn_off: programmeerbare_led
            - delay: 100ms
            - output.turn_on: programmeerbare_led
            - delay: 100ms
            - output.turn_off: programmeerbare_led
            - delay: 500ms
            - logger.log: "Annoying log"
